[
  {
    "_id": "1",
    "name": "Array",
    "content": "<p>Arrays are fundamental data structures in Java used to store multiple values of the same type in a single variable. They offer a convenient way to manage collections of data. For example, if you need to store the ages of several people, instead of creating individual variables for each age, you can use an array to hold all ages in a single data structure.</p>" ,
              "<h3>Declaring Arrays</h3>" ,
              "<p>In Java, arrays are declared by specifying the type of elements and the square brackets <code>[]</code>. The type can be any data type, including primitive types (like <code>int</code>, <code>float</code>, etc.) and reference types (like <code>String</code>, <code>Object</code>, etc.).</p>" +
              "<pre><code>Type[] arrayName;</code></pre>" +
              "<p>Example:</p>" +
              "<pre><code>String[] cars;</code></pre>" +
              "<pre><code>int[] numbers;</code></pre>" +
              "<h3>Initializing Arrays</h3>" +
              "<p>Initialization is the process of assigning values to an array after declaring it. You can initialize arrays either at the time of declaration or separately after declaration.</p>" +
              "<h4>Inline Initialization:</h4>" +
              "<pre><code>String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};</code></pre>" +
              "<pre><code>int[] myNum = {10, 20, 30, 40};</code></pre>" +
              "<h4>Separate Initialization:</h4>" +
              "<pre><code>String[] cars = new String[4];</code></pre>" +
              "<pre><code>cars[0] = \"Volvo\";</code></pre>" +
              "<pre><code>cars[1] = \"BMW\";</code></pre>" +
              "<pre><code>cars[2] = \"Ford\";</code></pre>" +
              "<pre><code>cars[3] = \"Mazda\";</code></pre>" +
              "<h3>Accessing Array Elements</h3>" +
              "<p>Array elements are accessed using their index, which starts at 0. The syntax to access an element is:</p>" +
              "<pre><code>arrayName[index];</code></pre>" +
              "<p>Example:</p>" +
              "<pre><code>String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};</code></pre>" +
              "<pre><code>System.out.println(cars[0]); // Outputs Volvo</code></pre>" +
              "<h3>Modifying Array Elements</h3>" +
              "<p>To change the value of an element in an array, you use the index and assign a new value to it.</p>" +
              "<p>Example:</p>" +
              "<pre><code>String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};</code></pre>" +
              "<pre><code>cars[0] = \"Opel\";</code></pre>" +
              "<pre><code>System.out.println(cars[0]); // Outputs Opel</code></pre>" +
              "<h3>Array Length</h3>" +
              "<p>The <code>length</code> property of an array provides the number of elements in the array. It is useful for looping through arrays and ensuring you do not exceed the bounds of the array.</p>" +
              "<p>Example:</p>" +
              "<pre><code>String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};</code></pre>" +
              "<pre><code>System.out.println(cars.length); // Outputs 4</code></pre>" +
              "<h3>Looping Through Arrays</h3>" +
              "<h4>For Loop:</h4>" +
              "<p>A standard <code>for</code> loop is commonly used to iterate through the elements of an array. It requires initializing a counter, checking a condition, and updating the counter.</p>" +
              "<p>Example:</p>" +
              "<pre><code>String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};</code></pre>" +
              "<pre><code>for (int i = 0; i < cars.length; i++) {</code></pre>" +
              "<pre><code>  System.out.println(cars[i]);</code></pre>" +
              "<pre><code>}</code></pre>" +
              "<h4>For-Each Loop:</h4>" +
              "<p>The enhanced <code>for-each</code> loop is designed for iterating over arrays and collections without needing an index. It is more readable and concise.</p>" +
              "<p>Syntax:</p>" +
              "<pre><code>for (Type element : arrayName) {</code></pre>" +
              "<pre><code>  // Use element</code></pre>" +
              "<pre><code>}</code></pre>" +
              "<p>Example:</p>" +
              "<pre><code>String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};</code></pre>" +
              "<pre><code>for (String car : cars) {</code></pre>" +
              "<pre><code>  System.out.println(car);</code></pre>" +
              "<pre><code>}</code></pre>" +
              "<h3>Multidimensional Arrays</h3>" +
              "<p>Java supports multidimensional arrays, which are essentially arrays of arrays. They are useful for representing more complex data structures like matrices or tables.</p>" +
              "<p>Declaration:</p>" +
              "<pre><code>int[][] matrix;</code></pre>" +
              "<p>Initialization:</p>" +
              "<pre><code>int[][] matrix = {</code></pre>" +
              "<pre><code>  {1, 2, 3},</code></pre>" +
              "<pre><code>  {4, 5, 6},</code></pre>" +
              "<pre><code>  {7, 8, 9}</code></pre>" +
              "<pre><code>};</code></pre>" +
              "<p>Accessing Elements:</p>" +
              "<pre><code>System.out.println(matrix[0][1]); // Outputs 2</code></pre>" +
              "<h3>Real-Life Examples</h3>" +
              "<h4>Calculating Average Age</h4>" +
              "<p>Arrays are often used in real-world applications for statistical calculations, such as finding averages.</p>" +
              "<p>Example:</p>" +
              "<pre><code>int[] ages = {20, 22, 18, 35, 48, 26, 87, 70};</code></pre>" +
              "<pre><code>float sum = 0;</code></pre>" +
              "<pre><code>int length = ages.length;</code></pre>" +
              "<pre><code>for (int age : ages) {</code></pre>" +
              "<pre><code>  sum += age;</code></pre>" +
              "<pre><code>}</code></pre>" +
              "<pre><code>float average = sum / length;</code></pre>" +
              "<pre><code>System.out.println(\"The average age is: \" + average);</code></pre>" +
              "<h4>Finding the Lowest Age</h4>" +
              "<p>Finding specific values in an array, such as the minimum or maximum value, is a common task.</p>" +
              "<p>Example:</p>" +
              "<pre><code>int[] ages = {20, 22, 18, 35, 48, 26, 87, 70};</code></pre>" +
              "<pre><code>int lowestAge = ages[0];</code></pre>" +
              "<pre><code>for (int age : ages) {</code></pre>" +
              "<pre><code>  if (age < lowestAge) {</code></pre>" +
              "<pre><code>    lowestAge = age;</code></pre>" +
              "<pre><code>  }</code></pre>" +
              "<pre><code>}</code></pre>" +
              "<pre><code>System.out.println(\"The lowest age is: \" + lowestAge);</code></pre>" +
              "<h3>Advanced Array Concepts</h3>" +
              "<h4>Dynamic Arrays</h4>" +
              "<p>In Java, <code>ArrayList</code> from the <code>java.util</code> package provides a dynamic array that can grow and shrink as needed. Unlike fixed-size arrays, <code>ArrayList</code> offers methods to add, remove, and access elements easily.</p>" +
              "<p>Example:</p>" +
              "<pre><code>import java.util.ArrayList;</code></pre>" +
              "<pre><code>ArrayList<String> cars = new ArrayList<>();</code></pre>" +
              "<pre><code>cars.add(\"Volvo\");</code></pre>" +
              "<pre><code>cars.add(\"BMW\");</code></pre>" +
              "<pre><code>cars.add(\"Ford\");</code></pre>" +
              "<pre><code>cars.add(\"Mazda\");</code></pre>" +
              "<pre><code>for (String car : cars) {</code></pre>" +
              "<pre><code>  System.out.println(car);</code></pre>" +
              "<pre><code>}</code></pre>" +
              "<h4>Jagged Arrays</h4>" +
              "<p>Jagged arrays (arrays of arrays where sub-arrays can have different lengths) are another type of multidimensional array.</p>" +
              "<p>Example:</p>" +
              "<pre><code>int[][] jaggedArray = {</code></pre>" +
              "<pre><code>  {1, 2},</code></pre>" +
              "<pre><code>  {3, 4, 5},</code></pre>" +
              "<pre><code>  {6, 7, 8, 9}</code></pre>" +
              "<pre><code>};</code></pre>" +
              "<pre><code>for (int i = 0; i < jaggedArray.length; i++) {</code></pre>" +
              "<pre><code>  for (int j = 0; j < jaggedArray[i].length; j++) {</code></pre>" +
              "<pre><code>    System.out.print(jaggedArray[i][j] + \" \");</code></pre>" +
              "<pre><code>  }</code></pre>" +
              "<pre><code>  System.out.println();</code></pre>" +
              "<pre><code>}</code></pre>" +
              "<h3>Practical Considerations</h3>" +
              "<ul>" +
              "<li><strong>Bounds Checking:</strong> Always ensure you access array elements within the valid range (0 to length-1). Accessing an invalid index throws <code>ArrayIndexOutOfBoundsException</code>.</li>" +
              "<li><strong>Memory Usage:</strong> Arrays use contiguous memory locations. For large datasets, be aware of memory constraints.</li>" +
              "<li><strong>Type Safety:</strong> Java arrays are type-safe, meaning that once an array is created with a specific type, it cannot hold elements of another type.</li>" +
              "<li><strong>Initialization:</strong> Arrays can be initialized with default values for their type (<code>0</code> for <code>int</code>, <code>null</code> for object types).</li>" +
              "<li><strong>Performance:</strong> Array operations, such as access and iteration, are generally very fast. However, operations like resizing or shifting elements can be costly.</li>" +
              "</ul>" +
              "<h3>Example Code</h3>" +
              "<pre><code>public class ArrayExamples {</code></pre>" +
              "<pre><code>    public static void main(String[] args) {</code></pre>" +
              "<pre><code>        // Declaring and initializing an array</code></pre>" +
              "<pre><code>        String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};</code></pre>" +
              "<pre><code>        int[] myNum = {10, 20, 30, 40};</code></pre>" +
              "<pre><code>        // Accessing array elements</code></pre>" +
              "<pre><code>        System.out.println(\"First car: \" + cars[0]); // Outputs Volvo</code></pre>" +
              "<pre><code>        System.out.println(\"Second number: \" + myNum[1]); // Outputs 20</code></pre>" +
              "<pre><code>        // Modifying an array element</code></pre>" +
              "<pre><code>        cars[0] = \"Opel\";</code></pre>" +
              "<pre><code>        System.out.println(\"Updated first car: \" + cars[0]); // Outputs Opel</code></pre>" +
              "<pre><code>        // Array length</code></pre>" +
              "<pre><code>        System.out.println(\"Number of cars: \" + cars.length); // Outputs 4</code></pre>" +
              "<pre><code>        // Looping through arrays with for loop</code></pre>" +
              "<pre><code>        System.out.println(\"Cars list:\");</code></pre>" +
              "<pre><code>        for (int i = 0; i < cars.length; i++) {</code></pre>" +
              "<pre><code>            System.out.println(cars[i]);</code></pre>" +
              "<pre><code>        }</code></pre>" +
              "<pre><code>        // Looping through arrays with for-each loop</code></pre>" +
              "<pre><code>        System.out.println(\"Numbers list:\");</code></pre>" +
              "<pre><code>        for (int num : myNum) {</code></pre>" +
              "<pre><code>            System.out.println(num);</code></pre>" +
              "<pre><code>        }</code></pre>" +
              "<pre><code>        // Multidimensional array example</code></pre>" +
              "<pre><code>        int[][] matrix = {</code></pre>" +
              "<pre><code>            {1, 2, 3},</code></pre>" +
              "<pre><code>            {4, 5, 6},</code></pre>" +
              "<pre><code>            {7, 8, 9}</code></pre>" +
              "<pre><code>        };</code></pre>" +
              "<pre><code>        System.out.println(\"Matrix elements:\");</code></pre>" +
              "<pre><code>        for (int i = 0; i < matrix.length; i++) {</code></pre>" +
              "<pre><code>            for (int j = 0; j < matrix[i].length; j++) {</code></pre>" +
              "<pre><code>                System.out.print(matrix[i][j] + \" \");</code></pre>" +
              "<pre><code>            }</code></pre>" +
              "<pre><code>            System.out.println();</code></pre>" +
              "<pre><code>        }</code></pre>" +
              "<pre><code>        // Real-life example: Calculating average age</code></pre>" +
              "<pre><code>        int[] ages = {20, 22, 18, 35, 48, 26, 87, 70};</code></pre>" +
              "<pre><code>        float sum = 0;</code></pre>" +
              "<pre><code>        int length = ages.length;</code></pre>" +
              "<pre><code>        for (int age : ages) {</code></pre>" +
              "<pre><code>            sum += age;</code></pre>" +
              "<pre><code>        }</code></pre>" +
              "<pre><code>        float average = sum / length;</code></pre>" +
              "<pre><code>        System.out.println(\"The average age is: \" + average);</code></pre>" +
              "<pre><code>        // Real-life example: Finding the lowest age</code></pre>" +
              "<pre><code>        int lowestAge = ages[0];</code></pre>" +
              "<pre><code>        for (int age : ages) {</code></pre>" +
              "<pre><code>            if (age < lowestAge) {</code></pre>" +
              "<pre><code>                lowestAge = age;</code></pre>" +
              "<pre><code>            }</code></pre>" +
              "<pre><code>        }</code></pre>" +
              "<pre><code>        System.out.println(\"The lowest age is: \" + lowestAge);</code></pre>" +
              "<pre><code>    }</code></pre>" +
              "<pre><code>}</code></pre>"
  },
  {
    "_id": "2",
    "name": "LinkedList",
    "content": "<p>Linked List is a linear data structure...</p>"
  },
  {
    "_id": "3",
    "name": "Tree",
    "content": "<p>A tree is a non-linear data structure...</p>"
  }
]
